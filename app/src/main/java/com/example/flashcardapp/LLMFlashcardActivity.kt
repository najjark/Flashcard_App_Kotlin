package com.example.flashcardapp

import android.annotation.SuppressLint
import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.ProgressBar
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase

// Activity that handles flashcards generated by the LLM and the functions of the flashcards
// like marking as correct or incorrect as well as navigating between flashcards and saving them to the database
class LLMFlashcardActivity : AppCompatActivity() {

    private lateinit var topic: String
    private var numberOfCards: Int = 0
    private lateinit var flashcardText: TextView
    private lateinit var showAnswerButton: Button
    private var flashcardsList = mutableListOf<Flashcard>()
    private var currentIndex = 0
    private val apiClient = LLMApiClient()
    private lateinit var nextButton: Button
    private lateinit var previousButton: Button
    private lateinit var backToHomeButton: Button
    private lateinit var correctButton: Button
    private lateinit var incorrectButton: Button
    private lateinit var saveFlashcardButton: Button
    private var isAnswerVisible = false
    private lateinit var loadingIndicator: ProgressBar

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_flashcard)

        topic = intent.getStringExtra("TOPIC").orEmpty().lowercase()
        numberOfCards = intent.getIntExtra("NUMBER_OF_CARDS", 3)
        flashcardText = findViewById(R.id.flashcardText)
        showAnswerButton = findViewById(R.id.showAnswerButton)
        nextButton = findViewById(R.id.nextButton)
        previousButton = findViewById(R.id.previousButton)
        backToHomeButton = findViewById(R.id.backToHomeButton)
        saveFlashcardButton = findViewById(R.id.saveFlashcardButton)
        correctButton = findViewById(R.id.correctButton)
        incorrectButton = findViewById(R.id.incorrectButton)
        loadingIndicator = findViewById(R.id.loadingIndicator)

        fetchFlashcardsFromApi(topic, numberOfCards)

        showAnswerButton.setOnClickListener { toggleAnswerVisibility() }
        nextButton.setOnClickListener { showNextFlashcard() }
        previousButton.setOnClickListener { showPreviousFlashcard() }
        correctButton.setOnClickListener { markFlashcardCorrect(topic) }
        incorrectButton.setOnClickListener { markFlashcardIncorrect(topic) }

        backToHomeButton.setOnClickListener {
            startActivity(Intent(this, HomePageActivity::class.java))
            finish()
        }

        saveFlashcardButton.setOnClickListener {
            val currentFlashcard = flashcardsList[currentIndex]

            if (currentFlashcard.isSaved) {
                Toast.makeText(this, "This flashcard is already saved.", Toast.LENGTH_SHORT).show()
                updateSaveButtonState()
                return@setOnClickListener
            }

            val userFlashcardsRef = Firebase.firestore.collection("user_flashcards")

            userFlashcardsRef
                .whereEqualTo("question", currentFlashcard.question)
                .whereEqualTo("answer", currentFlashcard.answer)
                .get()
                .addOnSuccessListener { documents ->
                    if (documents.isEmpty) {
                        val flashcardData = hashMapOf(
                            "question" to currentFlashcard.question,
                            "answer" to currentFlashcard.answer,
                            "timestamp" to System.currentTimeMillis(),
                            "topic" to topic.lowercase(),
                            "isSaved" to true
                        )

                        userFlashcardsRef.add(flashcardData)
                            .addOnSuccessListener {
                                Toast.makeText(this, "Flashcard saved!", Toast.LENGTH_SHORT).show()

                                flashcardsList[currentIndex].isSaved = true

                                updateSaveButtonState()
                            }
                            .addOnFailureListener { e ->
                                Toast.makeText(this, "Failed to save flashcard.", Toast.LENGTH_SHORT).show()
                                Log.e("FlashcardActivity", "Error saving flashcard", e)
                            }
                    } else {
                        Toast.makeText(this, "Flashcard already saved!", Toast.LENGTH_SHORT).show()
                        flashcardsList[currentIndex].isSaved = true
                        updateSaveButtonState()
                    }
                }
                .addOnFailureListener { e ->
                    Toast.makeText(this, "Failed to check existing flashcards.", Toast.LENGTH_SHORT).show()
                    Log.e("FlashcardActivity", "Error checking existing flashcards", e)
                }
        }
    }

    // Function to handle logic for correct flashcard marking
    private fun markFlashcardCorrect(topic: String) {
        val flashcard = flashcardsList[currentIndex]
        flashcard.isAnswered = true
        flashcard.isCorrect = true
        updateAnswerButtonState(flashcard)
        saveFlashcardProgress(flashcard, true, topic)
        Toast.makeText(this, "Correct!", Toast.LENGTH_SHORT).show()
    }

    // Function to handle logic for incorrect flashcard marking
    private fun markFlashcardIncorrect(topic: String) {
        val flashcard = flashcardsList[currentIndex]
        flashcard.isAnswered = true
        flashcard.isCorrect = false
        updateAnswerButtonState(flashcard)
        saveFlashcardProgress(flashcard, false, topic)
        Toast.makeText(this, "Incorrect!", Toast.LENGTH_SHORT).show()
    }

    // Function to handle navigation to the next flashcard
    private fun showNextFlashcard() {
        currentIndex = (currentIndex + 1) % flashcardsList.size
        displayFlashcard(currentIndex)
        updateNavigationButtons()
    }

    // Function to handle navigation to the previous flashcard
    private fun showPreviousFlashcard() {
        currentIndex = if (currentIndex - 1 < 0) flashcardsList.size - 1 else currentIndex - 1
        displayFlashcard(currentIndex)
        updateNavigationButtons()
    }

    // Function to handle whether to show question or answer
    private fun toggleAnswerVisibility() {
        val flashcard = flashcardsList[currentIndex]
        val newText = if (isAnswerVisible) flashcard.question else flashcard.answer

        flashcardText.animate()
            .alpha(0f)
            .setDuration(400)
            .withEndAction {
                flashcardText.text = newText

                flashcardText.animate()
                    .alpha(1f)
                    .setDuration(400)
                    .start()
            }
            .start()

        isAnswerVisible = !isAnswerVisible
        showAnswerButton.text = if (isAnswerVisible) "Show Question" else "Show Answer"
    }

    // Function to handle saving flashcard progress so it can be viewed in the progress page
    private fun saveFlashcardProgress(flashcard: Flashcard, isCorrect: Boolean, topic: String) {
        val db = FirebaseFirestore.getInstance()
        val progressData = hashMapOf(
            "question" to flashcard.question,
            "isCorrect" to isCorrect,
            "topic" to topic.lowercase(),
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("user_progress").add(progressData)
            .addOnSuccessListener {
                Log.d("LLMFlashcardActivity", "Progress saved successfully")
            }
            .addOnFailureListener { e ->
                Log.e("LLMFlashcardActivity", "Failed to save progress", e)
            }
    }

    // Function to load in the generated flashcard content from the API call
    @SuppressLint("SetTextI18n")
    private fun fetchFlashcardsFromApi(topic: String, numberOfCards: Int) {
        loadingIndicator.visibility = View.VISIBLE
        flashcardText.text = "Loading flashcards..."

        lifecycleScope.launch {
            try {
                withContext(Dispatchers.IO) {
                    apiClient.generateFlashcards(
                        topic,
                        numberOfCards,
                        { fetchedFlashcards ->
                            flashcardsList =
                                fetchedFlashcards.map { Flashcard(it.first, it.second) }.toMutableList()
                            flashcardsList.forEachIndexed { _, flashcard ->
                                saveFlashcardToLLMDatabase(flashcard)
                            }

                            runOnUiThread {
                                loadingIndicator.visibility = View.GONE
                                if (flashcardsList.isNotEmpty()) {
                                    displayFlashcard(currentIndex)
                                } else {
                                    flashcardText.text = "No flashcards generated."
                                }
                                updateNavigationButtons()
                            }
                        },
                        { errorMessage ->
                            runOnUiThread {
                                loadingIndicator.visibility = View.GONE
                                Toast.makeText(this@LLMFlashcardActivity, errorMessage, Toast.LENGTH_SHORT).show()
                            }
                        }
                    )
                }
            } catch (e: Exception) {
                loadingIndicator.visibility = View.GONE
                Toast.makeText(this@LLMFlashcardActivity, "Error: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }

    // Function to save all generated flashcards to the database
    private fun saveFlashcardToLLMDatabase(flashcard: Flashcard) {
        val llmFlashcardsRef = Firebase.firestore.collection("llm_flashcard")
        val flashcardData = hashMapOf(
            "question" to flashcard.question,
            "answer" to flashcard.answer,
            "timestamp" to System.currentTimeMillis(),
            "topic" to topic.lowercase(),
            "isSaved" to flashcard.isSaved
        )

        llmFlashcardsRef.add(flashcardData)
            .addOnSuccessListener {
                Log.d("FlashcardActivity", "Flashcard saved to LLM database")
            }
            .addOnFailureListener { e ->
                Log.e("FlashcardActivity", "Error saving flashcard to LLM database", e)
            }
    }

    // Function to display each flashcard's content, as well as fade in and out animations
    @SuppressLint("SetTextI18n")
    private fun displayFlashcard(index: Int) {
        val flashcard = flashcardsList[index]

        flashcardText.animate()
            .alpha(0f)
            .setDuration(400)
            .withEndAction {
                val newText = flashcard.question
                flashcardText.text = newText

                flashcardText.alpha = 0f

                flashcardText.animate()
                    .alpha(1f)
                    .setDuration(400)
                    .start()
            }
            .start()

        isAnswerVisible = false
        showAnswerButton.text = "Show Answer"

        updateSaveButtonState()
        updateNavigationButtons()
        updateAnswerButtonState(flashcard)
    }

    // Function to update answer button when navigating between flashcards
    private fun updateAnswerButtonState(flashcard: Flashcard) {
        val enabled = !flashcard.isAnswered
        correctButton.isEnabled = enabled
        incorrectButton.isEnabled = enabled

        correctButton.animate().alpha(if (enabled) 1.0f else 0.5f).setDuration(400).start()
        incorrectButton.animate().alpha(if (enabled) 1.0f else 0.5f).setDuration(400).start()
    }

    // Function to handle navigation button states
    private fun updateNavigationButtons() {
        previousButton.isEnabled = currentIndex > 0
        nextButton.isEnabled = currentIndex < flashcardsList.size - 1

        previousButton.alpha = if (previousButton.isEnabled) 1.0f else 0.5f
        nextButton.alpha = if (nextButton.isEnabled) 1.0f else 0.5f

        previousButton.animate().alpha(if (previousButton.isEnabled) 1.0f else 0.5f).setDuration(400).start()
        nextButton.animate().alpha(if (nextButton.isEnabled) 1.0f else 0.5f).setDuration(400).start()
    }

    // Function to handle the save button state
    private fun updateSaveButtonState() {
        val currentFlashcard = flashcardsList[currentIndex]
        saveFlashcardButton.isEnabled = !currentFlashcard.isSaved

        saveFlashcardButton.animate()
            .alpha(if (saveFlashcardButton.isEnabled) 1.0f else 0.5f)
            .setDuration(400)
            .start()
    }
}